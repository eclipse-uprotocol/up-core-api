/*
 * Copyright (c) 2023 General Motors GTO LLC
 *
 * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
syntax = "proto3";

package uprotocol;

import "google/protobuf/any.proto";

option java_package = "org.eclipse.uprotocol";
option java_multiple_files = true;


// Topic Message
message Topic {
  UAuthority authority = 1;
  UEntity entity = 2;
  UResource resource = 3;
  
  // Any additional details needed
  repeated google.protobuf.Any details = 10;
}


// An Authority represents the deployment location of a specific Software Entity.
// Data representation of an <b>Authority</b>.<br> An Authority consists of a device,
// a domain and a address for the device.<br>
// Device and domain names are used as part of the URI for device and service discovery.
message UAuthority {
  string device = 1;          // Device Name
  optional string domain = 2; // Domain name
  optional bytes address = 3; // Address of the device
  bool local = 4;             // Is this a local device
}


// Data representation of an <b> Software Entity - uE</b><br>
// Software entities are distinguished by using a unique name and id 
// along with the specific version of the software.
// An Software Entity is a piece of software deployed somewhere on a uDevice.<br>
// The Software Entity is used in the source and sink parts of communicating software.<br>
// A uE that publishes events is a <b>Service</b> role.<br>
// A uE that consumes events is an <b>Application</b> role.
message UEntity {
  string name = 1;    // Name of the entity
  uint32 id = 2;      // The numberic ID for the uEntity
  optional string version = 3; // optional version of the uEntity
}


// A service API - defined in the {@link UEntity} - has Resources and Methods. 
// Both of these are represented by the UResource message.
// A uResource represents a resource from a Service such as "door" and an optional
// specific instance such as "front_left". In addition, it can optionally contain
// the name of the resource Message type, such as "Door". The Message type matches
// the protobuf service IDL that defines structured data types.
// An UResource is something that can be manipulated/controlled/exposed by a service.
// Resources are unique when prepended with UAuthority that represents the device and
// UEntity that represents the service. 
message UResource {
  string name = 1;      // Name of the resource
  optional string instance = 2;  // Instance of the resource
  optional string message = 3;   // Message type for the resource
  uint32 id = 4;        // ID that represents the method/topic for the resource
}
